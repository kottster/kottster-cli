import path from 'path'
import fs from 'fs-extra'
import { AppConfig } from '../models/config.model'
import { AUTOGENERATED_FILE_HEADER } from '../constants/fileHeaders'

enum Stage {
  development = 'development',
  production = 'production'
}

interface CreateProjectOptions {
  projectName: string
  appId: string
}

interface PackageJsonOptions {
  name: string
  version?: string
  description?: string
  author?: string
  license?: string
  dependencies?: Record<string, string>
  devDependencies?: Record<string, string>
}

interface KottsterAppJsonOptions {
  appId: string
}

interface EnvOptions {}

/**
 * Service for creating files for a new project.
 */
export class FileCreator {
  constructor (
    private readonly APP_ID: string,
    private readonly PROJECT_DIR: string
  ) { }

  public async createProject (options: CreateProjectOptions): Promise<void> {
    // Check if project directory already exists
    if (fs.existsSync(this.PROJECT_DIR)) {
      throw new Error(`Project directory already exists: ${this.PROJECT_DIR}`)
    };

    // Create project directory
    await this.createDir()

    // Create root files
    await this.createPackageJson({ name: options.projectName })
    await this.createKottsterAppJson({ appId: options.appId })
    await this.createEnv({})
    await this.createGitIgnore()
    await this.createDir('src')
    await this.createMainJs()

    // Create files for each stage
    Object.values(Stage).forEach(async (stage) => {
      // Create src/<stage> directory
      await this.createDir(`src/${this.getStageDir(stage)}`)

      // Create src/<stage>/app.js file
      await this.createAppJs(stage)

      // Create src/__generated__ directory
      await this.createDir('src/__generated__')

      // Create src/__generated__/index.js file
      await this.createAutoImportsFile()
    })
  }

  /**
   * Create a package.json file
   */
  private async createPackageJson (options: PackageJsonOptions): Promise<void> {
    const packageJsonPath = path.join(this.PROJECT_DIR, 'package.json')

    const packageJson = {
      name: options.name,
      type: 'module',
      version: options.version || '1.0.0',
      description: options.description || '',
      author: options.author || '',
      license: options.license || 'MIT',
      scripts: {
        start: 'nodemon --experimental-specifier-resolution=node src/main.js'
      },
      dependencies: (options.dependencies != null) || {
        '@kottster/backend': 'file:../@kottster-backend'
        // '@kottster/backend': '^1.0.0',
      },
      devDependencies: (options.devDependencies != null) || {
        nodemon: '^3'
      }
    }
    const packageJsonContent = JSON.stringify(packageJson, null, 2)

    this.writeFile(packageJsonPath, packageJsonContent)
  }

  /**
   * Create a kottster-app.json file
   * @description This file contains the information about the Kottster app
   */
  private async createKottsterAppJson (options: KottsterAppJsonOptions): Promise<void> {
    const kottsterAppJsonPath = path.join(this.PROJECT_DIR, 'kottster-app.json')
    const kottsterAppJson: AppConfig = {
      appId: options.appId
    }
    const kottsterAppJsonContent = JSON.stringify(kottsterAppJson, null, 2)

    this.writeFile(kottsterAppJsonPath, kottsterAppJsonContent)
  }

  /**
   * Create a .env file
   */
  private async createEnv (options: EnvOptions): Promise<void> {
    const envPath = path.join(this.PROJECT_DIR, '.env')
    const envContent = Object.entries(options).map(([key, value]) => `${key}=${value}`).join('\n')

    this.writeFile(envPath, envContent)
  }

  /**
   * Create a .gitignore file
   */
  private async createGitIgnore (): Promise<void> {
    const gitIgnorePath = path.join(this.PROJECT_DIR, '.gitignore')
    const gitIgnoreContent = ['node_modules', 'nbuild', 'npm-debug.log', '.DS_Store'].join('\n')

    this.writeFile(gitIgnorePath, gitIgnoreContent)
  }

  /**
   * Create a src/<stage>/app.js file
   * @description This file creates the Kottster app for the specified stage
   */
  public async createAppJs (stage: Stage): Promise<void> {
    const mainJsPath = path.join(this.PROJECT_DIR, `src/${this.getStageDir(stage)}`, 'app.js')

    let mainJsContent = ''

    // Add imports
    mainJsContent += 'import { createApp } from \'@kottster/backend\';\n\n'

    // Create app and export it
    mainJsContent += `export const app = createApp({\n  stage: '${stage}',\n  envFilePath: '.env.${stage}',\n});\n\n`

    this.writeFile(mainJsPath, mainJsContent)
  }

  /**
   * Create a src/__generated__/index.js file
   * @description This file is used to auto-import all generated files
   */
  public async createAutoImportsFile (): Promise<void> {
    const indexJsPath = path.join(this.PROJECT_DIR, 'src/__generated__', 'index.js')
    const indexJsContent = AUTOGENERATED_FILE_HEADER + 'export {};\n\n'

    this.writeFile(indexJsPath, indexJsContent)
  }

  public async createProceduresIndexJs (stage: Stage): Promise<void> {
    const indexJsPath = path.join(this.PROJECT_DIR, `src/${this.getStageDir(stage)}`, 'index.js')
    const indexJsContent = AUTOGENERATED_FILE_HEADER + 'import { app } from \'./app.js\';\n\nexport default app;\n\n'

    this.writeFile(indexJsPath, indexJsContent)
  }

  /**
   * Create a src/main.js file
   * @description This file is the entry point for the application
   */
  public async createMainJs (): Promise<void> {
    const mainJsPath = path.join(this.PROJECT_DIR, 'src', 'main.js')
    let mainJsContent = ''

    // Add imports
    mainJsContent += 'import \'./__generated__\';\n'
    mainJsContent += 'import { AppManager } from \'@kottster/backend\';\n'
    mainJsContent += 'import { app as developmentApp } from \'./prod/app\';\n'
    mainJsContent += 'import { app as productionApp } from \'./dev/app\';\n\n'

    // Create express server and run it
    mainJsContent += 'const app = AppManager.createExpressApp([\n'
    mainJsContent += '  developmentApp,\n'
    mainJsContent += '  productionApp,\n'
    mainJsContent += ']);\n\n'
    mainJsContent += 'app.listen(5480);\n\n'

    this.writeFile(mainJsPath, mainJsContent)
  }

  /**
   * Create a directory
   */
  async createDir (dirName?: string): Promise<void> {
    try {
      if (!dirName) {
        await fs.ensureDir(this.PROJECT_DIR)
      } else {
        const dirPath = path.join(this.PROJECT_DIR, dirName)
        fs.ensureDir(dirPath)
      }
    } catch (error) {
      console.error(`Error creating ${dirName} directory:`, error)
    }
  }

  /**
   * Write content to a file
   */
  private writeFile (filePath: string, content: string): void {
    try {
      fs.writeFile(filePath, content)
    } catch (error) {
      console.error(`Error creating ${filePath} file:`, error)
    }
  }

  /**
   * Convert stage to a directory name
   */
  private getStageDir (stage: Stage): string {
    switch (stage) {
      case Stage.development:
        return 'dev'
      case Stage.production:
        return 'prod'
    }
  }
}
